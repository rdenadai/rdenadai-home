# base-image for python on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
FROM resin/%%RESIN_MACHINE_NAME%%-python

# use apt-get if you need to install dependencies,
# for instance if you need ALSA sound utils, just uncomment the lines below.
# RUN apt-get update && apt-get install -yq \
#    alsa-utils libasound2-dev && \
#    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN apt-get update

RUN apt-get install -y gcc sqlite3 libsqlite3-dev python3-dev

RUN sudo apt-get install -y \
    cron \
    nginx \
    sqlite3 \
    libsqlite3-dev \
    python3-dev \
    postgresql-server-dev-all \
    gcc g++ musl-dev cmake make \
    libwebp-dev libwebp5 \
    openssh-client \
    libffi-dev \
    nmap \
    net-tools \
    bluez \
    curl \
    poppler-utils \
    htop \
# Extra libs
    libraspberrypi-bin \
    enchant \
    liblapack-dev liblapack3 \
    libblas3 \
    libatlas-base-dev libatlas-dev \
    libatlas3-base \
    gfortran \
    libfreetype6 libfreetype6-dev libxft-dev libpng12-dev libjpeg-dev libtiff5 \
# Python build dependencies
    libmemcached-dev \
    zlib1g-dev \
    libssl-dev \
    python-dev \
    build-essential \
    libsqlite3-dev \
    libbz2-dev \
    libreadline6 \
    libreadline6-dev \
# pyenv dependencies
    git

### PYENV ###
ENV HOME /root
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
# see https://github.com/yyuu/pyenv-installer
RUN curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
RUN pyenv install 3.6.2
RUN pyenv global 3.6.2
RUN pyenv local 3.6.2
RUN pyenv rehash
RUN echo 'export PYENV_ROOT="$HOME/.pyenv"' >> /root/.bash_profile
RUN echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /etc/.bash_profile
RUN echo 'eval "$(pyenv init -)"' >> /etc/.bash_profile

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY ./requirements.txt /requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip install numpy
RUN pip install -r /requirements.txt

# This will copy all files in our root to the working  directory in the container
COPY . ./

RUN mkdir /root/.jupyter/
RUN touch /root/.jupyter/jupyter_notebook_config.py
Run chmod 700 /root/.jupyter/jupyter_notebook_config.py

# OLD EXECUTION...
RUN mkdir /root/.homeassistant/
RUN mkdir /root/.homeassistant/tts
RUN touch /root/.homeassistant/configuration.yaml
RUN chmod 700 /root/.homeassistant/configuration.yaml
RUN cp /usr/src/app/hass.io/automations.yaml /root/.homeassistant/automations.yaml
RUN cp /usr/src/app/hass.io/groups.yaml /root/.homeassistant/groups.yaml
RUN cp /usr/src/app/hass.io/known_devices.yaml /root/.homeassistant/known_devices.yaml

RUN mkdir /root/duckdns
RUN touch /root/duckdns/duck.sh
RUN touch /root/duckdns/duck.log
Run chmod 700 /root/duckdns/duck.sh
Run chmod 700 /root/duckdns/duck.log
RUN echo "*/5 * * * * root/duckdns/duck.sh >/dev/null 2>&1" | crontab

RUN chmod +x /usr/src/app/main.sh

# switch on systemd init system in container
ENV INITSYSTEM on

# main.sh will run when container starts up on the device
CMD ["/bin/sh", "main.sh"]